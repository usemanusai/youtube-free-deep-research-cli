name: Security Audit

on:
  schedule:
    - cron: '0 3 * * 0'
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  sast-and-secrets:
    name: SAST & Secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # Semgrep
      - run: |
          python -m pip install --upgrade pip
          python -m pip install semgrep
      - run: |
          semgrep --config auto --sarif > semgrep.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # Bandit (JSON only)
      - run: python -m pip install bandit
      - run: bandit -q -r . -f json -o bandit.json || true

      # Gitleaks (use action defaults, artifact only)
      - uses: gitleaks/gitleaks-action@v2

      # Summarize to PR and issues
      - name: Summarize & Issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            function exists(p){ try{ fs.accessSync(p); return true } catch { return false } }
            function readText(p){ try{ return fs.readFileSync(p,'utf8'); }catch(e){ return '' } }
            const sarifs = ['semgrep.sarif'].filter(exists);
            const hasFindings = sarifs.some(s => readText(s).includes('"results"') || readText(s).includes('"runs"')) || exists('bandit.json');
            const title = Security Audit ();
            if (hasFindings) {
              await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title, body: 'See Security tab for SARIF and artifacts.', labels: ['security','automated'] });
            }
            if (context.eventName === 'pull_request') {
              const body = Security audit completed. SARIF uploaded for: . Bandit JSON: .;
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.pull_request.number, body });
            }
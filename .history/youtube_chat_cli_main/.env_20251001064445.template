# ============================================================================
# JAEGIS NexusSync Configuration Template
# ============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit .env to version control
# ============================================================================

# ----------------------------------------------------------------------------
# LLM Configuration (Required)
# ----------------------------------------------------------------------------
# OpenRouter API key for AI analysis and generation
# Get your key from: https://openrouter.ai/
OPENROUTER_API_KEY=your_openrouter_api_key_here

# Alternative: OpenAI API key (if not using OpenRouter)
# OPENAI_API_KEY=your_openai_api_key_here

# Default LLM model to use
LLM_MODEL=meta-llama/llama-3.1-70b-instruct

# ----------------------------------------------------------------------------
# Google Drive Integration (Required for automated ingestion)
# ----------------------------------------------------------------------------
# Path to your Google OAuth 2.0 client secrets JSON file
# Download from: https://console.cloud.google.com/apis/credentials
GOOGLE_CLIENT_SECRETS_FILE=client_secret.json

# Google Drive folder ID to monitor (leave empty to configure later)
GOOGLE_DRIVE_FOLDER_ID=

# Google Drive polling interval in seconds (default: 60)
GOOGLE_DRIVE_POLL_INTERVAL=60

# ----------------------------------------------------------------------------
# Vector Store Configuration (Choose one: Qdrant or Chroma)
# ----------------------------------------------------------------------------
# Vector store type: "qdrant" or "chroma"
VECTOR_STORE_TYPE=qdrant

# Qdrant Configuration (if using Qdrant)
QDRANT_URL=https://your-cluster.qdrant.io
QDRANT_API_KEY=your_qdrant_api_key_here
QDRANT_COLLECTION_NAME=documents

# Chroma Configuration (if using Chroma - local)
CHROMA_PERSIST_DIRECTORY=./chroma_db
CHROMA_COLLECTION_NAME=documents

# ----------------------------------------------------------------------------
# Embedding Model Configuration (Choose one: Ollama or OpenAI)
# ----------------------------------------------------------------------------
# Embedding provider: "ollama" or "openai"
EMBEDDING_PROVIDER=ollama

# Ollama Configuration (if using Ollama - local)
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_EMBEDDING_MODEL=nomic-embed-text

# OpenAI Embeddings Configuration (if using OpenAI)
# OPENAI_EMBEDDING_MODEL=text-embedding-3-small

# ----------------------------------------------------------------------------
# Web Search Configuration (Required for Adaptive RAG)
# ----------------------------------------------------------------------------
# Tavily API key for web search functionality
# Get your key from: https://tavily.com/
TAVILY_API_KEY=your_tavily_api_key_here

# ----------------------------------------------------------------------------
# OCR Service Configuration (Required for PDF/Image processing)
# ----------------------------------------------------------------------------
# OCR provider: "mistral" or "google_vision" or "tesseract"
OCR_PROVIDER=mistral

# Mistral OCR API key (if using Mistral)
MISTRAL_API_KEY=your_mistral_api_key_here

# Google Cloud Vision API credentials (if using Google Vision)
# GOOGLE_VISION_CREDENTIALS_FILE=google_vision_credentials.json

# Tesseract is local and requires no API key

# ----------------------------------------------------------------------------
# Database Configuration
# ----------------------------------------------------------------------------
# SQLite database path for application state
DATABASE_PATH=./jaegis_nexus_sync.db

# ----------------------------------------------------------------------------
# Background Service Configuration
# ----------------------------------------------------------------------------
# Enable background service for automated Google Drive monitoring
BACKGROUND_SERVICE_ENABLED=true

# Background service check interval in seconds
BACKGROUND_SERVICE_INTERVAL=300

# ----------------------------------------------------------------------------
# Text Splitting Configuration
# ----------------------------------------------------------------------------
# Chunk size for text splitting (characters)
CHUNK_SIZE=1000

# Chunk overlap for context preservation (characters)
CHUNK_OVERLAP=200

# Split by markdown headings (recommended: true)
SPLIT_BY_HEADINGS=true

# ----------------------------------------------------------------------------
# RAG Configuration
# ----------------------------------------------------------------------------
# Number of documents to retrieve for RAG queries
RAG_TOP_K=5

# Minimum relevance score for retrieved documents (0.0 to 1.0)
RAG_MIN_RELEVANCE_SCORE=0.7

# Maximum number of query transformation attempts
RAG_MAX_TRANSFORM_ATTEMPTS=3

# Enable hallucination checking
RAG_HALLUCINATION_CHECK=true

# Enable answer relevance checking
RAG_ANSWER_CHECK=true

# ----------------------------------------------------------------------------
# PostgreSQL Configuration (Optional - for n8n chat memory compatibility)
# ----------------------------------------------------------------------------
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_DB=n8n
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=your_postgres_password

# ----------------------------------------------------------------------------
# TTS Configuration (Optional - for audio features)
# ----------------------------------------------------------------------------
# MaryTTS server URL (if using MaryTTS)
MARYTTS_SERVER_URL=http://localhost:59125

# TTS Bridge Python 3.11 executable path (for MeloTTS/Chatterbox)
TTS_BRIDGE_PYTHON=python3.11

# ----------------------------------------------------------------------------
# n8n Integration (Optional - for backward compatibility)
# ----------------------------------------------------------------------------
# n8n webhook URL for legacy RAG workflow
N8N_WEBHOOK_URL=http://localhost:5678/webhook/vTN9y2dLXqTiDfPT

# ----------------------------------------------------------------------------
# Logging Configuration
# ----------------------------------------------------------------------------
# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log file path
LOG_FILE=./logs/jaegis_nexus_sync.log

# ----------------------------------------------------------------------------
# MCP Server Configuration
# ----------------------------------------------------------------------------
# MCP server port (for AI assistant integration)
MCP_SERVER_PORT=3000

# Enable MCP server on startup
MCP_SERVER_ENABLED=false

# ----------------------------------------------------------------------------
# Development/Testing Configuration
# ----------------------------------------------------------------------------
# Enable debug mode
DEBUG=false

# Mock external API calls for testing
MOCK_APIS=false

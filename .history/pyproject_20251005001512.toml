[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "youtube-chat-cli-main"
version = "0.1.0"
description = "JAEGIS NexusSync: YouTube research CLI, FastAPI backend, and optional Next.js dashboard"
readme = "README.md"
authors = [
  { name = "JAEGIS / NexusSync" }
]
requires-python = ">=3.13,<4"
license = { text = "MIT" }
keywords = ["fastapi", "cli", "rag", "llm", "web-scraping", "youtube"]

# Core runtime dependencies (merged from youtube_chat_cli_main/requirements.txt and api_requirements.txt)
dependencies = [
  # Core CLI & config
  "click>=8.0.0",
  "python-dotenv>=1.0.0",
  "requests>=2.25.0",
  "halo>=0.0.31",
  "colorama>=0.4.6",

  # Content processing
  "youtube-transcript-api>=0.6.0",
  "beautifulsoup4>=4.9.0",
  "deepmultilingualpunctuation>=1.0.1",
  "pypdf2>=3.0.0",
  "python-docx>=0.8.11",
  "markdown>=3.4.0",
  "html2text>=2020.1.16",

  # LLM + workflows
  "langchain>=0.1.0",
  "langchain-community>=0.0.20",
  "langchain-openai>=0.0.5",
  "langchain-huggingface>=0.0.1",
  "langgraph>=0.0.20",
  "langchain-core>=0.1.0",

  # Google Drive
  "google-auth>=2.16.0",
  "google-auth-oauthlib>=1.0.0",
  "google-auth-httplib2>=0.1.0",
  "google-api-python-client>=2.80.0",

  # Vector stores
  "qdrant-client>=1.7.0",
  "chromadb>=0.4.0",

  # Embeddings
  "sentence-transformers>=2.2.0",
  "openai>=1.0.0",

  # Web search
  "tavily-python>=0.3.0",
  "duckduckgo-search>=4.0.0",

  # OCR & image
  "pytesseract>=0.3.10",
  "pillow>=10.0.0",
  "pdf2image>=1.16.0",

  # Background jobs
  "apscheduler>=3.10.0",

  # TTS (existing lightweight options; advanced engines are external)
  "gtts>=2.5.0",
  "pydub>=0.25.0",
  "edge-tts>=6.1.0",

  # FastAPI backend
  "fastapi>=0.115.0",
  "uvicorn[standard]>=0.32.0",
  "python-multipart>=0.0.12",
  "aiofiles>=24.1.0",
  "websockets>=13.1",

  # New HTTP client infra
  "httpx>=0.27.0",
  "tenacity>=8.2.3",
  "aiolimiter>=1.1.0",
]

[project.optional-dependencies]
playwright = ["playwright>=1.40.0"]

dev = [
  # Testing & quality
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-mock>=3.12.0",
  "pytest-cov>=5.0.0",
  "pytest-socket>=0.6.0",
  "responses>=0.25.0",
  "respx>=0.21.1",

  # Linters/formatters (kept here for completeness; repo uses ruff in CI)
  "black>=24.0.0",
  "flake8>=7.0.0",
  "mypy>=1.10.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]

[tool.uv]
# Using uv with pyproject + uv.lock for reproducible resolves
# Typical commands:
#   uv lock                 # generate uv.lock
#   uv pip sync --all       # sync environment from uv.lock
#   uv run pytest           # run tools in a managed venv


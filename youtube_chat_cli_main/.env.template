# ============================================================================
# JAEGIS NexusSync Configuration Template - 100% FREE TIER
# ============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit .env to version control
#
# ALL SERVICES CONFIGURED HERE ARE COMPLETELY FREE:
# - OpenRouter: Free tier with generous limits
# - Ollama: Free, runs locally (no API costs)
# - ChromaDB: Free, runs locally (no cloud costs)
# - Tesseract OCR: Free, open-source, local
# - Google Drive API: Free within Google's generous quotas
# - Tavily: Free tier available
# ============================================================================

# ----------------------------------------------------------------------------
# LLM Configuration (Required - FREE OPTIONS)
# ----------------------------------------------------------------------------
# Option 1: OpenRouter FREE tier (Recommended for cloud-based)
# - Sign up at: https://openrouter.ai/
# - Free tier includes: meta-llama/llama-3.1-8b-instruct (FREE)
# - Other free models: google/gemini-flash-1.5, mistral/mistral-7b-instruct
OPENROUTER_API_KEY=your_openrouter_api_key_here

# Option 2: Local Ollama (Recommended for privacy & unlimited usage)
# - Install: https://ollama.ai/download
# - Run: ollama pull llama3.1:8b (smaller, faster model)
# - Completely free, runs on your machine
# OLLAMA_BASE_URL=http://localhost:11434
# OLLAMA_MODEL=llama3.1:8b

# Default LLM model (use FREE models only)
# OpenRouter free models: meta-llama/llama-3.1-8b-instruct, google/gemini-flash-1.5
# Ollama models: llama3.1:8b, mistral:7b, phi3:mini
LLM_MODEL=meta-llama/llama-3.1-8b-instruct

# ----------------------------------------------------------------------------
# Google Drive Integration (FREE - within Google's generous quotas)
# ----------------------------------------------------------------------------
# Google Drive API is FREE for personal use within quotas:
# - 1 billion requests/day (you'll never hit this)
# - 10,000 requests per 100 seconds per user
# - No credit card required
#
# Setup instructions:
# 1. Go to: https://console.cloud.google.com/apis/credentials
# 2. Create new project (free)
# 3. Enable Google Drive API (free)
# 4. Create OAuth 2.0 Client ID -> Desktop app
# 5. Download JSON file and save as client_secret.json
#
GOOGLE_CLIENT_SECRETS_FILE=client_secret.json

# Google Drive folder ID to monitor (leave empty to configure later)
# To get folder ID: Open folder in browser, copy ID from URL
# Example URL: https://drive.google.com/drive/folders/1a2b3c4d5e6f7g8h9i0j
# Folder ID: 1a2b3c4d5e6f7g8h9i0j
GOOGLE_DRIVE_FOLDER_ID=

# Google Drive polling interval in seconds (default: 60)
# Lower values = faster detection but more API calls
# 60 seconds is a good balance for free tier
GOOGLE_DRIVE_POLL_INTERVAL=60

# ----------------------------------------------------------------------------
# Vector Store Configuration (FREE - Local ChromaDB Recommended)
# ----------------------------------------------------------------------------
# Vector store type: "chroma" (FREE, local) or "qdrant" (has free tier but cloud-based)
VECTOR_STORE_TYPE=chroma

# ChromaDB Configuration (RECOMMENDED - 100% FREE, runs locally)
# - No installation needed, included in requirements.txt
# - No API keys, no cloud costs, unlimited storage (limited by disk space)
# - Data stored locally on your machine
CHROMA_PERSIST_DIRECTORY=./chroma_db
CHROMA_COLLECTION_NAME=documents

# Qdrant Configuration (Alternative - has free tier but requires cloud account)
# - Free tier: 1GB storage, 100k vectors
# - Sign up at: https://cloud.qdrant.io/
# QDRANT_URL=https://your-cluster.qdrant.io
# QDRANT_API_KEY=your_qdrant_api_key_here
# QDRANT_COLLECTION_NAME=documents

# ----------------------------------------------------------------------------
# Embedding Model Configuration (FREE - Local Ollama Recommended)
# ----------------------------------------------------------------------------
# Embedding provider: "ollama" (FREE, local) or "openai" (costs money)
EMBEDDING_PROVIDER=ollama

# Ollama Configuration (RECOMMENDED - 100% FREE)
# - Install Ollama: https://ollama.ai/download
# - Pull embedding model: ollama pull nomic-embed-text
# - Model size: ~274MB (very lightweight)
# - Runs locally, no API costs, unlimited usage
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_EMBEDDING_MODEL=nomic-embed-text

# Alternative lightweight models:
# - all-minilm:l6-v2 (23MB, very fast)
# - mxbai-embed-large (670MB, higher quality)

# OpenAI Embeddings (NOT RECOMMENDED - costs money)
# OPENAI_EMBEDDING_MODEL=text-embedding-3-small

# ----------------------------------------------------------------------------
# Web Search Configuration (FREE TIER - Optional for Adaptive RAG)
# ----------------------------------------------------------------------------
# Tavily API - FREE tier available
# - Sign up at: https://tavily.com/
# - Free tier: 1,000 searches/month (very generous)
# - No credit card required for free tier
TAVILY_API_KEY=your_tavily_api_key_here

# Alternative: DuckDuckGo (completely free, no API key needed)
# - Will be used as fallback if Tavily not configured
# - Unlimited searches, no rate limits
# - Slightly lower quality results than Tavily
USE_DUCKDUCKGO_FALLBACK=true

# ----------------------------------------------------------------------------
# OCR Service Configuration (FREE - Tesseract Recommended)
# ----------------------------------------------------------------------------
# OCR provider: "tesseract" (FREE, local) or "mistral" (costs money)
OCR_PROVIDER=tesseract

# Tesseract OCR (RECOMMENDED - 100% FREE, open-source)
# - Install on Windows: https://github.com/UB-Mannheim/tesseract/wiki
#   Download installer: tesseract-ocr-w64-setup-5.3.3.exe
# - Install on macOS: brew install tesseract
# - Install on Linux: sudo apt-get install tesseract-ocr
# - No API key needed, runs locally, unlimited usage
# - Supports 100+ languages
TESSERACT_PATH=C:\Program Files\Tesseract-OCR\tesseract.exe

# Mistral OCR (NOT RECOMMENDED - costs money)
# MISTRAL_API_KEY=your_mistral_api_key_here

# Google Cloud Vision (NOT RECOMMENDED - costs money after free tier)
# GOOGLE_VISION_CREDENTIALS_FILE=google_vision_credentials.json

# ----------------------------------------------------------------------------
# Database Configuration
# ----------------------------------------------------------------------------
# SQLite database path for application state
DATABASE_PATH=./jaegis_nexus_sync.db

# ----------------------------------------------------------------------------
# Background Service Configuration
# ----------------------------------------------------------------------------
# Enable background service for automated Google Drive monitoring
BACKGROUND_SERVICE_ENABLED=true

# Background service check interval in seconds
BACKGROUND_SERVICE_INTERVAL=300

# ----------------------------------------------------------------------------
# Text Splitting Configuration
# ----------------------------------------------------------------------------
# Chunk size for text splitting (characters)
CHUNK_SIZE=1000

# Chunk overlap for context preservation (characters)
CHUNK_OVERLAP=200

# Split by markdown headings (recommended: true)
SPLIT_BY_HEADINGS=true

# ----------------------------------------------------------------------------
# RAG Configuration
# ----------------------------------------------------------------------------
# Number of documents to retrieve for RAG queries
RAG_TOP_K=5

# Minimum relevance score for retrieved documents (0.0 to 1.0)
RAG_MIN_RELEVANCE_SCORE=0.7

# Maximum number of query transformation attempts
RAG_MAX_TRANSFORM_ATTEMPTS=3

# Enable hallucination checking
RAG_HALLUCINATION_CHECK=true

# Enable answer relevance checking
RAG_ANSWER_CHECK=true

# ----------------------------------------------------------------------------
# PostgreSQL Configuration (Optional - for n8n chat memory compatibility)
# ----------------------------------------------------------------------------
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_DB=n8n
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=your_postgres_password

# ----------------------------------------------------------------------------
# TTS Configuration (Optional - for audio features)
# ----------------------------------------------------------------------------
# MaryTTS server URL (if using MaryTTS)
MARYTTS_SERVER_URL=http://localhost:59125

# TTS Bridge Python 3.11 executable path (for MeloTTS/Chatterbox)
TTS_BRIDGE_PYTHON=python3.11

# ----------------------------------------------------------------------------
# n8n Integration (Optional - for backward compatibility)
# ----------------------------------------------------------------------------
# n8n webhook URL for legacy RAG workflow
N8N_WEBHOOK_URL=http://localhost:5678/webhook/vTN9y2dLXqTiDfPT

# ----------------------------------------------------------------------------
# Logging Configuration
# ----------------------------------------------------------------------------
# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log file path
LOG_FILE=./logs/jaegis_nexus_sync.log

# ----------------------------------------------------------------------------
# MCP Server Configuration
# ----------------------------------------------------------------------------
# MCP server port (for AI assistant integration)
MCP_SERVER_PORT=3000

# Enable MCP server on startup
MCP_SERVER_ENABLED=false

# ----------------------------------------------------------------------------
# Development/Testing Configuration
# ----------------------------------------------------------------------------
# Enable debug mode
DEBUG=false

# Mock external API calls for testing
MOCK_APIS=false

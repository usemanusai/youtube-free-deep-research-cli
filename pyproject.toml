[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "youtube-chat-cli"
version = "2.0.0"
description = "AI-powered CLI tool for YouTube video analysis, channel monitoring, and automated content processing"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "YouTube Chat CLI Team", email = "youtube-chat-cli@example.com"}
]
maintainers = [
    {name = "YouTube Chat CLI Team", email = "youtube-chat-cli@example.com"}
]
keywords = ["cli", "ai", "youtube", "channel-monitoring", "tts", "transcription", "n8n", "rag", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Communications :: Chat",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.25.0",
    "halo>=0.0.31",
    "youtube-transcript-api>=1.2.0",
    "beautifulsoup4>=4.9.0",
    "deepmultilingualpunctuation>=1.0.1",
    "langchain-huggingface>=0.3.0",
    "langchain-openai>=0.1.0",
    "colorama>=0.4.4",
    "tqdm>=4.64.0",
    "google-api-python-client>=2.0.0",
    "google-auth-oauthlib>=1.0.0",
    "google-auth-httplib2>=0.2.0",
    "apscheduler>=3.10.0",
    "python-dateutil>=2.8.0",
    "sqlalchemy>=1.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]
tts = [
    "gtts>=2.3.0",
    "edge-tts>=6.1.0",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
]
all = [
    "pytest>=7.0.0",
    "pytest-mock>=3.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "gtts>=2.3.0",
    "edge-tts>=6.1.0",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/usemanusai/youtube-free-deep-research-cli"
Repository = "https://github.com/usemanusai/youtube-free-deep-research-cli"
Documentation = "https://github.com/usemanusai/youtube-free-deep-research-cli#readme"
"Bug Reports" = "https://github.com/usemanusai/youtube-free-deep-research-cli/issues"

[project.scripts]
youtube-chat = "youtube_chat_cli.cli.main:main"
youtube-chat-cli = "youtube_chat_cli.cli.main:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
youtube_chat_cli = ["*.template"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/youtube_chat_cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
